package javaApplication;

import java.util.*;


public class ImplementingDataStructure {
	
    
    public static int[] extractionArray= new int[Integer.SIZE-1];
    
    
    public static int ExtractionCount=extractionArray.length-1;
    public static void main(String argv[])
    {
        ImplementingDataStructure obj=new ImplementingDataStructure();
        List<Integer> arr= new ArrayList<Integer>();//(Arrays.asList(100000,10000,1000,100,10,1,45,67,11192830));
        for(int j=0;j<extractionArray.length;j++)
        {
        	extractionArray[j]=(int)Math.pow(2, j);
        }
       // try
        {
        arr=File_Reader.main(null);
        }
     //   catch(IOException e)
        {
        	
        }
        
        
   
       // System.out.println("Before -> "+arr);
        long starttime=System.currentTimeMillis();
        arr= obj.sort(arr,ExtractionCount);
        long stoptime=System.currentTimeMillis();
    //    System.out.println("After -> "+arr);
        System.out.println("Time in Milliseconds "+(stoptime-starttime));
        System.out.println(arr.size());
       
        
    }

  
    public List<Integer> sort(List<Integer> input,int ec)
    {
        Bucket bucket0=new Bucket();
        Bucket bucket1=new Bucket();
        int bucketsize0=0;
        int bucketsize1=0;
        if(input.size()== 1 || ec==-1)
        {
        	//System.out.println("Returning Input");
            return input;
        }
        else
        { 
        for(int i=0;i<input.size();i++)
        {
            if(extractionArray[ec] !=(extractionArray[ec]& input.get(i))) 
            {
                    bucket0.arr.add(input.get(i));
                    bucketsize0=bucket0.arr.size();
            }
            
            else
            {
                    bucket1.arr.add(input.get(i));
                    bucketsize1=bucket1.arr.size();
                    
            }
        
        
        }
      //  System.out.println("Extraction count -> "+ec);
        
    //    System.out.println("Contents of bucket 0 before recursive call "+bucket0.arr);
       
   //     System.out.println("Contents of bucket 1 before recursive call "+bucket1.arr);
        ec--;
        if(bucket0.arr.size()!=0)
        {
            bucket0.arr=sort(bucket0.arr,ec);
        }     
        if(bucket1.arr.size()!=0)
        {
        	bucket1.arr=sort(bucket1.arr,ec);
        }
           
   
     //   System.out.println("Contents of bucket 0 after recursive call "+bucket0.arr);
       
       
     //   System.out.println("Contents of bucket 1 after recursive call "+bucket1.arr);
          
           
           //recursion
           input.clear();
           for(int i=0;i<bucketsize0;i++)
           {
               input.add(i,bucket0.arr.get(i));
               
           }
           for(int i=bucketsize0;i<bucketsize0+bucketsize1;i++)
           {
               input.add(i,bucket1.arr.get(i-bucketsize0));
           }
           
          // System.out.println("Bucketsize0 "+bucketsize0+" Bucketsize1 "+bucketsize1);           
        //   System.out.println(input);

           return input;
    
        }
        
    }
}